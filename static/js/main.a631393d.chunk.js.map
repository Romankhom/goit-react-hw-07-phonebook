{"version":3,"sources":["components/ContactForm/ContactForm.module.css","App.module.css","components/ListItem/ListItem.module.css","reverseTransition.module.css","components/Filter/Filter.module.css","redux/actions/formAction.js","redux/operations/formOperations.js","redux/selectors/formSelectors.js","components/ContactForm/ContactForm.js","redux/actions/filterAction.js","components/Filter/Filter.js","components/ListItem/ListItem.js","components/ContactList/ContactList.js","App.js","redux/reducers/formReducer.js","redux/store.js","index.js"],"names":["module","exports","addContactRequest","createAction","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","axios","defaults","baseURL","addContact","name","number","dispatch","formAction","post","then","response","data","catch","error","fetchContacts","get","removeContact","id","delete","getItems","state","contacts","items","getFilter","filter","getLoading","loading","getItemById","createSelector","_","itemId","find","item","getChoosenItems","toLowerCase","includes","ContactForm","formInitialState","sameName","handleInput","target","value","setState","handleSubmit","event","preventDefault","props","some","contact","setTimeout","timeOutAlert","onAddContact","this","className","formStyle","autoComplete","onSubmit","CSSTransition","classNames","in","timeout","unmountOnExit","alertModal","htmlFor","type","placeholder","onChange","Component","mapDispatchToProps","formOperations","connect","formSelectors","contactsFilter","contactsFilterChange","styleFilter","filterWrap","filterTitle","ownId","onRemoveContact","styleList","onClick","choosenItems","TransitionGroup","component","styleApp","contactsList","length","map","key","titleStyle","App","showTitle","onFetchContacts","prevState","container","isLoading","title","createReducer","action","payload","combineReducers","store","configureStore","reducer","formReducer","middleware","getDefaultMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a631393d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__39Pxr\",\"contactForm__label\":\"ContactForm_contactForm__label__261jm\",\"contactForm__input\":\"ContactForm_contactForm__input__2Pnqz\",\"contactForm__submit\":\"ContactForm_contactForm__submit__1t8jW\",\"alertModal\":\"ContactForm_alertModal__3Bi_M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3G73X\",\"title\":\"App_title__2X2Ms\",\"contactsList\":\"App_contactsList__2Mc-l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list_item\":\"ListItem_list_item__1gs15\",\"list_item-name\":\"ListItem_list_item-name__1H0pq\",\"list_item-number\":\"ListItem_list_item-number__1PDVB\",\"list_item-button\":\"ListItem_list_item-button__1uNQ_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enterActive\":\"reverseTransition_enterActive__2t8aC\",\"task\":\"reverseTransition_task__2TlkX\",\"exitActive\":\"reverseTransition_exitActive___E4vp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter_input\":\"Filter_filter_input__1Rh-g\",\"filterTitle\":\"Filter_filterTitle__2m5Nn\"};","import { createAction } from \"@reduxjs/toolkit\";\n\nconst addContactRequest = createAction(\"@contacts/addRequest\");\nconst addContactSuccess = createAction(\"@contacts/addSuccess\");\nconst addContactError = createAction(\"@contacts/addError\");\n\nconst removeContactRequest = createAction(\"@contacts/removeRequest\");\nconst removeContactSuccess = createAction(\"@contacts/removeSuccess\");\nconst removeContactError = createAction(\"@contacts/removeError\");\n\nconst fetchContactsRequest = createAction(\"@contacts/fetchRequest\");\nconst fetchContactsSuccess = createAction(\"@contacts/fetchSuccess\");\nconst fetchContactsError = createAction(\"@contacts/fetchError\");\n\nexport default {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  removeContactRequest,\n  removeContactSuccess,\n  removeContactError\n};\n\nexport const removeContact = createAction(\"@contacts/remove\");\n","import axios from \"axios\";\nimport formAction from \"../actions/formAction\";\n\naxios.defaults.baseURL = \"http://localhost:5000\"\n\nconst addContact = (name, number) => (dispatch) => {\n  dispatch(formAction.addContactRequest());\n\n  axios\n    .post(\"/contacts\", { name, number })\n    .then((response) => {\n      dispatch(formAction.addContactSuccess(response.data));\n    })\n    .catch((error) => dispatch(formAction.addContactError));\n};\n\nconst fetchContacts = () => (dispatch) => {\n  dispatch(formAction.fetchContactsRequest());\n   \n  axios.get(\"/contacts\") \n  .then(({data}) => dispatch(formAction.fetchContactsSuccess(data)))\n  .catch((error) => dispatch(formAction.fetchContactsError(error)))\n}\n\nconst removeContact = (id) => dispatch => {\n  dispatch(formAction.removeContactRequest());\n\n  axios.delete(`/contacts/${id}`)\n  .then(() => dispatch(formAction.removeContactSuccess(id)))\n  .catch((error) => dispatch(formAction.removeContactError(error)))\n}\n\nexport default {\n  addContact,\n  fetchContacts,\n  removeContact\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getLoading = (state) => state.contacts.loading;\n\nconst getItems = (state) => state.contacts.items;\n\nconst getFilter = (state) => state.contacts.filter;\n\nconst getItemById = createSelector([getItems, (_, itemId) => itemId], (items, itemId) => {\n  return items.find((item) => item.id === itemId);\n});\n\nconst getChoosenItems = createSelector(\n  [getItems, getFilter],\n  (items, filter) => {\n    return items.filter((item) =>\n      item.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n\nexport default {\n  getLoading,\n  getItems,\n  getItemById,\n  getFilter,\n  getChoosenItems,\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { CSSTransition } from \"react-transition-group\";\n// import { addContact } from \"../../redux/actions/formAction\";\nimport  formOperations  from \"../../redux/operations/formOperations\";\nimport formStyle from \"./ContactForm.module.css\";\nimport \"./ContactForm.css\";\nimport formSelectors from \"../../redux/selectors/formSelectors\";\n\nclass ContactForm extends Component {\n  formInitialState = {\n    name: \"\",\n    number: \"\",\n    sameName: false,\n  };\n\n  state = {\n    ...this.formInitialState,\n  };\n\n  handleInput = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const contacts = this.props.items;\n    const value = event.target.name.value;\n\n    if (contacts.some((contact) => contact.name === value)) {\n      this.setState({\n        name: \"\",\n        number: \"\",\n        sameName: true,\n      });\n      setTimeout(this.timeOutAlert, 1500);\n      return;\n    }\n\n    const name = this.state.name;\n    const number = this.state.number;\n    this.props.onAddContact(name, number);\n\n    this.setState({\n      name: \"\",\n      number: \"\",\n    });\n  };\n\n  timeOutAlert = () => {\n    this.setState({\n      sameName: false,\n    });\n  };\n\n  render() {\n    const { name, number, sameName } = this.state;\n\n    return (\n      <form\n        className={formStyle[\"contactForm\"]}\n        autoComplete=\"off\"\n        onSubmit={this.handleSubmit}\n      >\n        <CSSTransition\n          classNames=\"alertWindow\"\n          in={sameName}\n          timeout={1000}\n          unmountOnExit\n        >\n          <div className={formStyle.alertModal}>Contact already exist!</div>\n        </CSSTransition>\n\n        <label htmlFor=\"name\" className={formStyle[\"contactForm__label\"]}>\n          Name\n        </label>\n        <input\n          className={formStyle[\"contactForm__input\"]}\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          placeholder=\"   Enter your name\"\n          value={name}\n          onChange={this.handleInput}\n        />\n        <label htmlFor=\"number\" className={formStyle[\"contactForm__label\"]}>\n          Number\n        </label>\n        <input\n          className={formStyle[\"contactForm__input\"]}\n          type=\"tel\"\n          name=\"number\"\n          id=\"Number\"\n          placeholder=\"   Enter your number\"\n          value={number}\n          onChange={this.handleInput}\n        />\n\n        <button className={formStyle[\"contactForm__submit\"]} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    items: formSelectors.getItems(state),\n  };\n};\n\nconst mapDispatchToProps = {\n  onAddContact: formOperations.addContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import { createAction } from \"@reduxjs/toolkit\";\n// import { FILTER_CONTACT } from \"../constants/formConstants\";\n\nexport const contactsFilter = createAction(\"@contacts/filter\");\n\n// export const contactsFilter = (filter) => ({\n//   type: FILTER_CONTACT,\n//   payload: filter,\n// });\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { contactsFilter } from \"../../redux/actions/filterAction\";\nimport styleFilter from \"./Filter.module.css\";\nimport formSelectors from \"../../redux/selectors/formSelectors\";\n\nconst Filter = ({ value, contactsFilterChange }) => {\n  return (\n    <div className={styleFilter.filterWrap}>\n      <h3 className={styleFilter.filterTitle}>Find by name</h3>\n      <input\n        type=\"text\"\n        className={styleFilter[\"filter_input\"]}\n        value={value}\n        onChange={(event) => contactsFilterChange(event.target.value)}\n      ></input>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  value: formSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = {\n  contactsFilterChange: contactsFilter,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport formOperations from \"../../redux/operations/formOperations\";\nimport styleList from \"./ListItem.module.css\";\nimport formSelectors from \"../../redux/selectors/formSelectors\";\n\nconst ListItem = ({ onRemoveContact, name, number }) => {  \n  return (\n    <li className={styleList[\"list_item\"]}>\n      <p className={styleList[\"list_item-name\"]}>{name}: </p>\n      <p className={styleList[\"list_item-number\"]}> {number}</p>\n      <button\n        onClick={onRemoveContact}\n        className={styleList[\"list_item-button\"]}\n      >\n        &times;\n      </button>\n    </li>\n  );\n};\n\nconst mapStateToProps = (state, ownId) => {\n  const item = formSelectors.getItemById(state, ownId.id);\n  return { ...item };\n};\n\nconst mapDispatchToProps = (dispatch, ownId) => ({\n  onRemoveContact: () => dispatch(formOperations.removeContact(ownId.id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ListItem);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport styleApp from \"../../App.module.css\";\nimport titleStyle from \"../../reverseTransition.module.css\";\nimport ListItem from \"../ListItem/ListItem\";\nimport formSelectors from \"../../redux/selectors/formSelectors\";\n\nconst ContactList = ({choosenItems}) => { \n    return (\n      <TransitionGroup component=\"ul\" className={styleApp.contactsList}>\n        {choosenItems.length > 0 &&\n          choosenItems.map(({id}) => (\n            <CSSTransition key={id} classNames={titleStyle} timeout={500}>\n              <ListItem id={id}/>          \n            </CSSTransition>\n          ))}\n      </TransitionGroup>\n    );\n}\n\nconst mapStateToProps = (state) => ({  \n    choosenItems: formSelectors.getChoosenItems(state\n      )\n  \n});\n\nexport default connect(mapStateToProps)(ContactList);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { CSSTransition } from \"react-transition-group\";\nimport ContactForm from \"./components/ContactForm/ContactForm.js\";\nimport Filter from \"./components/Filter/Filter.js\";\nimport ContactList from \"./components/ContactList/ContactList.js\";\nimport { contactsFilter } from \"./redux/actions/filterAction\";\nimport formSelectors from \"./redux/selectors/formSelectors\";\nimport styleApp from \"./App.module.css\";\nimport titleStyle from \"./reverseTransition.module.css\";\nimport formOperations from \"./redux/operations/formOperations.js\";\n\nclass App extends Component {\n  state = {\n    showTitle: false,\n  };\n\n  componentDidMount() {\n    this.props.onFetchContacts();\n\n    this.setState({\n      showTitle: true,\n    });\n  }\n\n  componentDidUpdate(prevState) {}\n\n  render() {\n    const { showTitle } = this.state;\n    return (\n      <div className={styleApp.container}>\n        {this.props.isLoading && <h1>LOADING...</h1>}\n        <CSSTransition classNames={titleStyle} in={showTitle} timeout={500}>\n          <h1 className={styleApp.title}>Phonebook</h1>\n        </CSSTransition>\n        <ContactForm contacts={this.props.items} />\n\n        {this.props.items.length > 1 && <Filter />}\n\n        <h2>Contacts</h2>\n\n        <ContactList />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    items: formSelectors.getItems(state),\n    isLoading: formSelectors.getLoading(state),\n  };\n};\n\nconst mapDispatchToProps = {\n  contactsFilter,\n  onFetchContacts: formOperations.fetchContacts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport formAction from \"../actions/formAction\";\nimport { contactsFilter } from \"../actions/filterAction\";\n\n\nconst addItem = (state, { payload }) => {\n  return [...state, payload];\n};\nconst removeItem = (state, { payload }) => {\n  return state.filter((item) => item.id !== payload);\n};\n\nconst items = createReducer([], {\n  [formAction.fetchContactsSuccess]: (state, action) => action.payload,\n  [formAction.addContactSuccess]: addItem,\n  [formAction.removeContactSuccess]: removeItem, \n});\n\nconst filter = createReducer(\"\", {\n  [contactsFilter]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [formAction.fetchContactsRequest]: () => true,\n  [formAction.fetchContactsSuccess]: () => false,\n  [formAction.fetchContactsError]: () => false,\n  [formAction.addContactRequest]: () => true,\n  [formAction.addContactSuccess]: () => false,\n  [formAction.addContactError]: () => false,\n  [formAction.removeContactRequest]: () => true,\n  [formAction.removeContactSuccess]: () => false,\n  [formAction.removeContactError]: () => false\n});\n\n// const error = createReducer(null, )\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n  // error\n});\n","\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport formReducer from \"../redux/reducers/formReducer\";\n\nconst store = configureStore({\n  reducer: {\n    contacts: formReducer,\n  },\n  middleware: [...getDefaultMiddleware()]\n});\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {Provider} from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>  \n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}